---

import Filters from "./Partials/Filters.astro";
import Tags from "./Partials/Tags.astro";
import Card from "./Partials/Card.astro";

const response = await fetch(import.meta.env.SECRET_GRAPHQL_ENDPOINT, {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({
      query: `
        query ClientsQuery($status: PostStatusEnum = PUBLISH) {
            clients(where: {status: $status}, first: 100) {
                nodes {
                    title
                    clientSettings {
                        clientLogo {
                            altText
                            sourceUrl
                        }
                        clientCaseStudy {
                            ... on CaseStudy {
                                slug
                                databaseId
                            }
                        }
                    }
                    industries {
                        nodes {
                            slug
                            parentId
                            termTaxonomyId
                            parent {
                                node {
                                    termTaxonomyId
                                }
                            }
                        }
                    }
                }
            }
        }
    `
    }),
});

const json = await response.json();

const clients = json.data.clients.nodes;

---

<div class="clients-view blade" is="clients-view">
    <div class="container">
        <div class="filters">
            <Filters />
        </div>
        <div class="tags">
            <Tags />
        </div>
        <div class="cards">
            {
                clients.map((client)=>{
                    return <Card {...client.clientSettings.clientLogo} />
                })
            }
        </div>
    </div>
</div>

<style lang="scss">
    .clients-view {
        background-color: var(--color-black);
        color: var(--color-white);

        .container {
            display: grid;
            grid-template-areas:
                "filters tags"
                "filters cards";
            grid-template-columns: 4fr 8fr;
            grid-template-rows: min-content 1fr;
            grid-column-gap: var(--padding-unit-50);
            grid-row-gap: var(--padding-unit-30);
        }

        .filters {
            grid-area: filters;
        }

        .tags {
            grid-area: tags;
            min-height: 4.4rem;
        }

        .cards {
            grid-area: cards;
            display: grid;
            grid-template-columns: repeat(4, 23rem);
            grid-auto-rows: min-content;
            grid-gap: var(--padding-unit-30);

            @media(max-width: 991px) {
                grid-template-columns: repeat(3, 1fr);
            }

            @media(max-width: 767px) {
                grid-template-columns: repeat(2, 1fr);
            }

            @media(max-width: 599px) {
                grid-template-columns: 1fr;
            }
        }
    }
</style>

<script>
    window.addEventListener("DOMContentLoaded", function(){
        const clientView = document.querySelector(".clients-view")
        if(clientView) {
            const filters = clientView.querySelector(".filters")
            const tags = clientView.querySelector(".tags")
            const cards = clientView.querySelector(".cards")
            const filterSettings = {
                caseStudiesOnly: false,
                taxonomy: {
                    industry: [],
                },
                items: {
                    all: [],
                    current: [],
                },
            }

            const taxonomyFilterToggle = function(event) {
                const checkbox = event.target
                const taxonomy = checkbox.dataset.taxonomy
                const termId = checkbox.dataset.termId
                let tag;
                if(checkbox.checked) {
                    //add tag to tag list
                    tag = ''
                } else {
                    //remove tag from tag list
                    tag = tags.querySelector(`.taxonomy-tag[data-taxonomy="${taxonomy}"][data-term-id="${termId}"]`)
                }
                if(tag) {
                    console.log(tag)
                }
            }

            const filterTaxonomies = filters.querySelectorAll("input[type=checkbox]")
            if(filterTaxonomies && filterTaxonomies.length > 0) {
                for(const checkbox of filterTaxonomies) {
                    checkbox.addEventListener("click", taxonomyFilterToggle)
                }
            }
        }
    })
</script>