---

import iconX from "@assets/images/MouseCursor/x.svg";
import iconPlay from "@assets/images/MouseCursor/play.svg";
import iconArrowRight from "@assets/images/MouseCursor/arrow-right.svg";
import iconArrowLeft from "@assets/images/MouseCursor/arrow-left.svg";
import iconPlus from "@assets/images/MouseCursor/plus.svg";
import iconMinus from "@assets/images/MouseCursor/minus.svg";

const useCustomMouse = import.meta.env.PUBLIC_USE_CUSTOM_CURSOR;

const cssVars = {
    iconX: `url(${iconX.src})`,
    iconPlay: `url(${iconPlay.src})`,
    iconArrowRight: `url(${iconArrowRight.src})`,
    iconArrowLeft: `url(${iconArrowLeft.src})`,
    iconPlus: `url(${iconPlus.src})`,
    iconMinus: `url(${iconMinus.src})`,
    mouseCursor: (useCustomMouse) ? "none" : "auto",
};

---

<div id="cursor" data-circle-expand="false" data-icon="">
	<div id="cursorCircle"></div>
	<div id="cursorIcon"></div>
</div>

<style lang="scss" define:vars={cssVars}>

:global(*) {
	cursor: none !important;
}

#cursor, #cursor * {
    pointer-events: none;
}

#cursor {
    display: block;
    position: fixed;
    width: 80px;
    height: 80px;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 999;
}

#cursor.hidden {
    display: none;
}

#cursorCircle {
    display: block;
    width: 25px;
    height: 25px;
    border: 8px solid var(--color-pink);
    border-radius: 100%;
    transition: width 160ms ease-in-out, height 160ms ease-in-out, transform 90ms ease-out;
    background-color: rgba(255, 255, 255, 0.167);
    box-shadow: 0 0 1px black;
}

#cursor.click #cursorCircle {
    transform: scale(0.63);
}

#cursor[data-circle-expand="true"] #cursorCircle {
    width: 100%;
    height: 100%;
}

#cursor[data-circle-expand="true"].click #cursorCircle {
    transform: scale(0.75);
}

#cursorIcon {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translateX(-50%) translateY(-50%) scale(0);
    width: 35px;
    height: 35px;
    transition: transform 160ms ease-out;
    background-size: contain;
    background-position: center;
}

#cursor:not([data-icon=""]) #cursorIcon {
    transform:  translateX(-50%) translateY(-50%) scale(1);
    background-position: center;
    background-size: contain;
}

#cursor:not([data-icon=""]).click #cursorIcon {
    transform:  translateX(-50%) translateY(-50%) scale(0.75);
}

#cursor[data-icon="plus"] #cursorIcon {
    background-image: var(--iconPlus);
}

#cursor[data-icon="minus"] #cursorIcon {
    background-image: var(--iconMinus);
}

#cursor[data-icon="arrow-left"] #cursorIcon {
    background-image: var(--iconArrowLeft);
}

#cursor[data-icon="arrow-right"] #cursorIcon {
    background-image: var(--iconArrowRight);
}

#cursor[data-icon="play"] #cursorIcon {
    background-image: var(--iconPlay);
}

#cursor[data-icon="x"] #cursorIcon {
    background-image: var(--iconX);
}
</style>

<script>
	(function(){
    window.addEventListener('DOMContentLoaded', function(){
        const cursor = document.getElementById('cursor');

        if(cursor) {

            let cursorX = -100;
            let cursorY = -100;
            let hoveredElementsExpand;
            let iconElementsExpand;

            const cursorSizeOffset = 0.5 * cursor.clientWidth;

            const initializeCursor = function() {
                document.addEventListener('mousemove', event => {
                    cursorX = event.clientX - cursorSizeOffset;
                    cursorY = event.clientY - cursorSizeOffset;
                });

                document.documentElement.addEventListener('mousedown', () => {
                    cursor.classList.add('click');
                });

                document.documentElement.addEventListener('mouseup', () => {
                    cursor.classList.remove('click');
                });

                document.documentElement.addEventListener('mouseleave', () => {
                    cursor.classList.add('hidden');
                });

                document.documentElement.addEventListener('mouseenter', () => {
                    cursor.classList.remove('hidden');
                });

                const moveCursor = function() {
                    cursor.style.transform = `translate(${cursorX}px, ${cursorY}px)`;
                    hoveredElementsExpand = document.querySelectorAll('[data-cursor-expand]:hover, a:hover, button:hover');
                    iconElementsExpand = document.querySelectorAll('[data-cursor-icon]:hover');
                    cursor.dataset.circleExpand = (0 < hoveredElementsExpand.length) ? 'true' : 'false';
                    cursor.dataset.icon = (0 < iconElementsExpand.length) ? iconElementsExpand[0].dataset.cursorIcon : '';
    
                    requestAnimationFrame(moveCursor);
                }
    
                requestAnimationFrame(moveCursor);
            }

            initializeCursor();
        }

    });
})();
</script>