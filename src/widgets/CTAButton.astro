---
interface Props {
  label: string;
  href: string;
  target: string;
  style?: string;
  lightboxVideo?: string;
  additionalCssClasses?: string;
  class?: string;
}

const { label, href, target = '_self', style, lightboxVideo, class: className } = Astro.props;
---

<a href={href} class:list={["cta-button button-large", style, className]} target={target}>{label}</a>
<style lang="scss">
  .cta-button {
    display: inline-block;
    font-weight: bold;
    text-decoration: none;
    color: white;
    position: relative;
    padding-right: 2.6rem;
    transition: color 0.3s ease-in-out;
    line-height: 1;

    &.margin-start-30 {
      margin-block-start: var(--padding-unit-30);
    }
  }

  .cta-button::after {
    content: "";
    height: 1.6rem;
    width: 1.6rem;
    position: absolute;
    right: 0.5rem;
    top: 50%;
    transform: translateY(-50%);
    background-image: url(/white_link.svg);
    background-repeat: no-repeat;
    background-size: contain;
    transition: right 0.3s ease-in-out, background-image 0.3s ease-in-out;
  }

  .cta-button:focus,
  .cta-button:hover {
    color: var(--color-pink);
  }

  .cta-button:focus-visible {
    outline: 2px solid var(--color-pink);
  }

  .cta-button:hover::after,
  .cta-button:focus::after {
    background-image: url(/hover_right.svg);
    right: 0;
  }

  .cta-button.button {
    padding: 1.5rem;
    border: 2px solid var(--color-pink);
    background-color: var(--color-pink);
    color: white;

    &::after {
      display: none;
    }

    &:focus, &:hover {
      background-color: var(--color-white);
      color: var(--color-pink);
    }
  }
</style>
